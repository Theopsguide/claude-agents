{
  "skills": [
    {
      "name": "brainstorming",
      "description": "Use when creating or developing anything, before writing code or implementation plans - refines rough ideas into fully-formed designs through structured Socratic questioning, alternative exploration, and incremental validation",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "changelog-generator",
      "description": "Automatically creates user-facing changelogs from git commits",
      "version": "1.0.0",
      "author": "Theopsguide",
      "originalAuthor": "ComposioHQ",
      "tags": [
        "git",
        "changelog",
        "release-notes",
        "documentation",
        "automation"
      ],
      "dependencies": [],
      "files": [
        "skill.js",
        "config.json",
        "README.md"
      ],
      "capabilities": [
        "git-history-analysis",
        "commit-categorization",
        "user-friendly-translation",
        "markdown-generation"
      ]
    },
    {
      "name": "condition-based-waiting",
      "description": "Use when tests have race conditions, timing dependencies, or inconsistent pass/fail behavior - replaces arbitrary timeouts with condition polling to wait for actual state changes, eliminating flaky tests from timing guesses",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "example.ts",
        "SKILL.md"
      ]
    },
    {
      "name": "defense-in-depth",
      "description": "Use when invalid data causes failures deep in execution, requiring validation at multiple system layers - validates at every layer data passes through to make bugs structurally impossible",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "dispatching-parallel-agents",
      "description": "Use when facing 3+ independent failures that can be investigated without shared state or dependencies - dispatches multiple Claude agents to investigate and fix independent problems concurrently",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "example-skill",
      "description": "Example skill showing the structure",
      "version": "1.0.0",
      "author": "Theopsguide",
      "tags": [
        "example",
        "template"
      ],
      "dependencies": [],
      "files": [
        "skill.js",
        "config.json",
        "README.md"
      ]
    },
    {
      "name": "executing-plans",
      "description": "Use when partner provides a complete implementation plan to execute in controlled batches with review checkpoints - loads plan, reviews critically, executes tasks in batches, reports for review between batches",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "finishing-a-development-branch",
      "description": "Use when implementation is complete, all tests pass, and you need to decide how to integrate the work - guides completion of development work by presenting structured options for merge, PR, or cleanup",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "receiving-code-review",
      "description": "Use when receiving code review feedback, before implementing suggestions, especially if feedback seems unclear or technically questionable - requires technical rigor and verification, not performative agreement or blind implementation",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "requesting-code-review",
      "description": "Use when completing tasks, implementing major features, or before merging to verify work meets requirements - dispatches superpowers:code-reviewer subagent to review implementation against plan or requirements before proceeding",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "code-reviewer.md",
        "SKILL.md"
      ]
    },
    {
      "name": "root-cause-tracing",
      "description": "Use when errors occur deep in execution and you need to trace back to find the original trigger - systematically traces bugs backward through call stack, adding instrumentation when needed, to identify source of invalid data or incorrect behavior",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "find-polluter.sh",
        "SKILL.md"
      ]
    },
    {
      "name": "sharing-skills",
      "description": "Use when you've developed a broadly useful skill and want to contribute it upstream via pull request - guides process of branching, committing, pushing, and creating PR to contribute skills back to upstream repository",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "subagent-driven-development",
      "description": "Use when executing implementation plans with independent tasks in the current session - dispatches fresh subagent for each task with code review between tasks, enabling fast iteration with quality gates",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "systematic-debugging",
      "description": "Use when encountering any bug, test failure, or unexpected behavior, before proposing fixes - four-phase framework (root cause investigation, pattern analysis, hypothesis testing, implementation) that ensures understanding before attempting solutions",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "test-pressure-1.md",
        "test-pressure-2.md",
        "test-academic.md",
        "test-pressure-3.md",
        "CREATION-LOG.md",
        "SKILL.md"
      ]
    },
    {
      "name": "test-driven-development",
      "description": "Use when implementing any feature or bugfix, before writing implementation code - write the test first, watch it fail, write minimal code to pass; ensures tests actually verify behavior by requiring failure first",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "testing-anti-patterns",
      "description": "Use when writing or changing tests, adding mocks, or tempted to add test-only methods to production code - prevents testing mock behavior, production pollution with test-only methods, and mocking without understanding dependencies",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "testing-skills-with-subagents",
      "description": "Use when creating or editing skills, before deployment, to verify they work under pressure and resist rationalization - applies RED-GREEN-REFACTOR cycle to process documentation by running baseline without skill, writing to address failures, iterating to close loopholes",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "using-git-worktrees",
      "description": "Use when starting feature work that needs isolation from current workspace or before executing implementation plans - creates isolated git worktrees with smart directory selection and safety verification",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "using-superpowers",
      "description": "Use when starting any conversation - establishes mandatory workflows for finding and using skills, including using Read tool before announcing usage, following brainstorming before coding, and creating TodoWrite todos for checklists",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "verification-before-completion",
      "description": "Use when about to claim work is complete, fixed, or passing, before committing or creating PRs - requires running verification commands and confirming output before making any success claims; evidence before assertions always",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "writing-plans",
      "description": "Use when design is complete and you need detailed implementation tasks for engineers with zero codebase context - creates comprehensive implementation plans with exact file paths, complete code examples, and verification steps assuming engineer has minimal domain knowledge",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "SKILL.md"
      ]
    },
    {
      "name": "writing-skills",
      "description": "Use when creating new skills, editing existing skills, or verifying skills work before deployment - applies TDD to process documentation by testing with subagents before writing, iterating until bulletproof against rationalization",
      "version": "1.0.0",
      "author": "obra",
      "originalRepo": "https://github.com/obra/superpowers",
      "tags": [
        "imported"
      ],
      "dependencies": [],
      "files": [
        "graphviz-conventions.dot",
        "anthropic-best-practices.md",
        "persuasion-principles.md",
        "SKILL.md"
      ]
    }
  ]
}