name: Grok PR Review
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get PR diff
        id: diff
        run: |
          git fetch origin ${{ github.base_ref }}
          DIFF=$(git diff origin/${{ github.base_ref }}...HEAD)
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: KISS Review
        id: kiss
        run: |
          RESPONSE=$(curl -s https://openrouter.ai/api/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENROUTER_API_KEY }}" \
            -d '{
              "model": "x-ai/grok-code-fast-1",
              "messages": [
                {
                  "role": "user",
                  "content": "Review this PR for unnecessary complexity. Challenge:\n- \"What if we need...\" assumptions\n- Features not explicitly required NOW\n- Multiple components that could be one\n- Clever solutions where boring ones work\n\nFlag anything violating KISS/YAGNI. Be ruthless. Bullet points only for real issues.\n\nPR Diff:\n```\n${{ steps.diff.outputs.diff }}\n```"
                }
              ]
            }')
          REVIEW=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          echo "review<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Security Review
        id: security
        run: |
          RESPONSE=$(curl -s https://openrouter.ai/api/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENROUTER_API_KEY }}" \
            -d '{
              "model": "x-ai/grok-code-fast-1",
              "messages": [
                {
                  "role": "user",
                  "content": "Security review only. Flag critical issues:\n- Auth/authorization problems\n- Input validation gaps\n- SQL injection, XSS vulnerabilities\n- Secret exposure\n- SSRF, RCE risks\n\nBullet points only. Skip minor concerns.\n\nPR Diff:\n```\n${{ steps.diff.outputs.diff }}\n```"
                }
              ]
            }')
          REVIEW=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          echo "review<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Post Review Comment
        uses: actions/github-script@v7
        with:
          script: |
            const kissReview = `${{ steps.kiss.outputs.review }}`;
            const securityReview = `${{ steps.security.outputs.review }}`;
            
            const body = `## ðŸ¤– Automated Review\n\n### KISS Simplification Check\n${kissReview}\n\n### Security Review\n${securityReview}`;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
